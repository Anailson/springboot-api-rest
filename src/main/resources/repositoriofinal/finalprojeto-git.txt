https://github.com/rcaneppele/2770-spring-boot



usuário e senha para teste
usuario: anailson.ribeiro@voll.med
senha:123456
insert into usuarios values(1,'anailson.ribeiro@voll.med',
'$2a$10$Y50UaMFOxteibQEYLrwuHeehHYfcoafCopUazP12.rqB41bsolF5.');

/** incluindo order e limit 1 da erro
 * select m from Medico m
 *             where
 *             m.ativo = 1
 *             and
 *             m.especialidade = :especialidade
 *             and
 *             m.id not in(
 *                 select c.medico.id from Consulta c
 *                 where
 *                 c.data = :data
 *               )
 *             order by rand()
 *             limit 1
 * /

 //https://trello.com/b/O0lGCsKb/api-voll-med

 ---Teste com H2--
 Como citado no vídeo anterior, podemos realizar os testes de interfaces repository utilizando um banco de dados em memória, como o H2, ao invés de utilizar o mesmo banco de dados da aplicação.

 Caso você queira utilizar essa estratégia de executar os testes com um banco de dados em memória, será necessário incluir o H2 no projeto, adicionando a seguinte dependência no arquivo pom.xml:

 <dependency>
   <groupId>com.h2database</groupId>
   <artifactId>h2</artifactId>
   <scope>runtime</scope>
 </dependency>COPIAR CÓDIGO
 E também deve remover as anotações @AutoConfigureTestDatabase e @ActiveProfiles na classe de teste, deixando-a apenas com a anotação @DataJpaTest:

 @DataJpaTest
 class MedicoRepositoryTest {

   //resto do código permanece igual

 }COPIAR CÓDIGO
 Você também pode apagar o arquivo application-test.properties, pois o Spring Boot realiza as configurações de url, username e password do banco de dados H2 de maneira automática.